{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","request","url","fetch","then","response","Promise","race","resolve","reject","setTimeout","Error","status","ok","json","getPhoneIds","startTime","phones","map","phone","id","catch","err","Date","now","getFirstReceivedDetails","phoneIds","any","getAllSuccessfulDetails","allSettled","getThreeFastestDetails","promises","slice","length","forEach","chunk","push","window","addEventListener","containerFirst","document","getElementById","containerAll","containerFirstThree","ids","insertAdjacentHTML","toUpperCase","message","value","reason","promise","container"],"mappings":"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","file":"main.a1df87c8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/'\n  + 'phone-catalogue-static/api/phones';\n\nconst request = (url) => {\n  return fetch(url)\n    .then((response) => {\n      return Promise.race([\n        new Promise((resolve, reject) => {\n          setTimeout(() => {\n            reject(new Error(`Error: ${response.status}`));\n          }, 5000);\n        }),\n        new Promise((resolve, reject) => {\n          if (response.ok) {\n            resolve(response.json());\n          } else {\n            reject(new Error('Can not connect to the server.'));\n          }\n        }),\n      ]);\n    });\n};\n\nconst getPhoneIds = (startTime) => {\n  const timeout = 15000;\n\n  return request(`${BASE_URL}.json`)\n    .then(phones => phones.map(phone => phone.id))\n    .catch(err => {\n      if (startTime + timeout < Date.now()) {\n        return getPhoneIds();\n      }\n\n      return Promise.reject(err);\n    });\n};\n\nconst getFirstReceivedDetails = (phoneIds) => {\n  return Promise.any(phoneIds.map(id => request(`${BASE_URL}/${id}.json`)));\n};\n\nconst getAllSuccessfulDetails = (phoneIds) => {\n  return Promise.allSettled(\n    [...phoneIds].map(id => request(`${BASE_URL}/${id}.json`))\n  );\n};\n\nconst getThreeFastestDetails = (phoneIds) => {\n  const promises = [];\n  const idsInThreeChunks = [\n    phoneIds.slice(0, phoneIds.length / 3),\n    phoneIds.slice(phoneIds.length / 3, 2 * phoneIds.length / 3),\n    phoneIds.slice(2 * phoneIds.length / 3),\n  ];\n\n  idsInThreeChunks.forEach(chunk => {\n    promises.push(Promise.any(\n      chunk.map(id => request(`${BASE_URL}/${id}.json`))\n    ));\n  });\n\n  return promises;\n};\n\nwindow.addEventListener('load', () => {\n  const containerFirst = document.getElementById('first');\n  const containerAll = document.getElementById('all');\n  const containerFirstThree = document.getElementById('first-three');\n\n  getPhoneIds(Date.now())\n    .then(ids => {\n      getFirstReceivedDetails(ids)\n        .then(phone => {\n          containerFirst\n            .insertAdjacentHTML(\n              'beforeend',\n              `<li>${phone.id.toUpperCase()}</li>`\n            );\n        })\n        .catch(err => {\n          containerFirst\n            .insertAdjacentHTML('beforeend',\n              `<li class=\"error\">${err.message}</li>`);\n        });\n\n      getAllSuccessfulDetails(ids)\n        .then(phones => {\n          phones.forEach(phone => {\n            if (phone.status === 'fulfilled') {\n              containerAll\n                .insertAdjacentHTML(\n                  'beforeend',\n                  `<li>${phone.value.id.toUpperCase()}</li>`\n                );\n            } else {\n              containerAll\n                .insertAdjacentHTML('beforeend',\n                  `<li class=\"error\">${phone.reason}</li>`);\n            }\n          });\n        });\n\n      getThreeFastestDetails(ids).forEach(promise => {\n        promise\n          .then(phone => {\n            containerFirstThree\n              .insertAdjacentHTML(\n                'beforeend',\n                `<li>${phone.id.toUpperCase()}</li>`\n              );\n          })\n          .catch(err => {\n            containerFirstThree\n              .insertAdjacentHTML('beforeend',\n                `<li class=\"error\">${err.message}</li>`);\n          });\n      });\n    })\n    .catch(err => {\n      [containerFirst, containerAll, containerFirstThree]\n        .map(container => {\n          container\n            .insertAdjacentHTML('beforeend',\n              `<li class=\"error\">${err.message}</li>`);\n        });\n    });\n});\n"]}